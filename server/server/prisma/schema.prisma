// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user{
  id String @id @default(uuid())
  name String
  email String
  password String
  dob DateTime
  type String @default("BASIC")
  workouts workout[] @relation(name: "myWorkouts")
  favorites workout[] @relation(name: "favorite")
  comments comment[]
  replies reply[]
}

model workout{
  id String @id @default(uuid())
  name String
  desc String
  user user @relation(name: "myWorkouts", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  favorites user[] @relation(name: "favorite")
  muscles muscle[] 
  equipments equipment[]
  tips tip[]
  plans plan[]
  comments comment[]
}

model exercise{
  id String @id @default(uuid())
  name String
  plans plan[]
}

model muscle{
  id String @id @default(uuid())
  name String
  workouts workout[]
}

model equipment{
  id String @id @default(uuid())
  name String
  workouts workout[]
}

model plan{
  id String @id @default(uuid())
  sets Int
  reps Int
  exercise exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  workout workout @relation(fields: [workoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workoutId String
}

model tip{
  id String @id @default(uuid())
  tip String
  workout workout @relation(fields: [workoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workoutId String
}

model comment{
  id String @id @default(uuid())
  comment String
  removed Boolean @default(false)
  user user @relation(fields: [userId], references: [id])
  userId String 
  workout workout @relation(fields: [workoutId], references: [id])
  workoutId String 
  replies reply[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model reply{
  id String @id @default(uuid())
  reply String
  removed Boolean @default(false)
  user user @relation(fields: [userId], references: [id])
  userId String 
  comment comment @relation(fields: [commentId], references: [id])
  commentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}